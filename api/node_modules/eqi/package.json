{
  "name": "eqi",
  "version": "0.0.0",
  "description": "Eqi ====== Eqi is a hapi inspired web framework for nodejs.",
  "main": "server.js",
  "dependencies": {
    "async": "~0.8.0",
    "lodash": "~2.4.0",
    "routes": "~1.1.0",
    "eqrouter": "git://github.com/rt2zz/eqrouter",
    "remander": "git://github.com/rt2zz/remander"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "author": {
    "name": "Zack Story",
    "email": "zstory@ucla.edu"
  },
  "license": "ISC",
  "readme": "Eqi\n======\nEqi is a hapi inspired web framework for nodejs.\n\n## Overview\nCreate a server\n```js\nvar Eqi = require('eqi')\nvar server = Eqi.createServer()\n```\n\nExtend the server with \"Extensions\".\n```js\n//Session and Cookie Support\nserver.extend(require('eqstock').session, {keys: ['key1', 'key2']})\n//Session based Authentication\nserver.extend(require('eqauth'), {key: 'user'})\n```\n\nSetup plugins.\n```js\nserver.plugin(require('./plugins/user'))\nserver.plugin(require('./plugins/about'))\n```\n\nStart server.\n```js\nserver.port(4002).tls('default').start(function(){\n  console.log('server started')\n})\n```\n\n## Application Structure\nRecommended structure:\napp/app.js\n```js\nvar server = require('./server/server.js')\n\nserver.plugin(require('./plugins/user'))\n\nserver.port(4002).start(function(){\n  console.log('server started')\n})\n```\n\napp/server/server.js\n```js\nvar Eqi = require('eqi')\nvar server = Eqi.createServer()\n\nserver.extend(require('eqauth'), {key: 'user'})\n\nmodule.exports = server\n```\n\napp/plugins/user/plugin.js\n```js\nexports.plugin = function(plugin, options, next) {\n  //Setup\n  next();\n};\n\nexports.route = function(plugin, options, next){  \n  plugin.route({\n    path: '/admin',\n    method: \"GET\",\n    auth: 'required',\n    handler: function(request, reply) {\n      reply(\"Hello Eqi\");\n    }\n  })\n  next()\n}\n```\n\n## API\n\n###Remands\nThe term remands is overloaded in eqi.  A remand is a function that looks as follows\n```js\nfunction(request, remand){\n  //...\n  remand(results)\n}\n```\nA remand is intended to be used in a remand chain.  Anywhere in eqi that requires a remand will take it in the following format:\n```js\n//as an array (run in series)\n[{key: remand}, {key2: remand2}]\n//twice deep array (run in parallel)\n[[{key: remand}, {key2: remand2}]]\n//an object\n{key: remand}\n```\nWhen the remand chain is run, the result of each remand is stored on an object under the specified key.\n```js\nvar chain = [{first: remand1}, [{parallelA: remandA}, {parallelB: remandB}]]\n//... results in:\n{\n  first: (result from remand1)\n  parallelA: (result from remandA)\n  parallelB: (result from remandB)\n}\n```\nNote that the result is flattened, and that keys must be unique.\n\n###Pipeline\nThe pipeline is a remand chain that every request is passed through.  It allows various extensions and plugins to register remands with the proper order of execution.  Pipelines have \"pipepoints\", i.e. handlers that act as checkpoints which remands can be placed before or after.\nFor example to add a remand at the beginning of every request:\n```js\nserver.pipeline('postRequest', {example: function(request, remand){\n    remand('example')\n  }\n})\n```\n\n###Route\nMuch like the server pipeline, routes have their own remand chain with the following predefined \"pipepoints\":\n*postDispatch* - Run immediately after dispatching (i.e. path is parsed) the route\n*preHandler* - Run preceding the route handler\n*postHandler* - Run after the route handler\n\n```js\nserver.route({\n  path: 'user/:id',\n  postDispatch: [...]\n  preHandler: [...]\n  postHandler: [...]\n  handler: function(request, reply){ ... }\n})\n```\n\n###Request Object\nAs with many frameworks eqi defines its own request object.\n```js\nrequest.raw.request //vanilla node request\nrequest.raw.response //vanilla node response\nrequest.reply //equipt reply object\nrequest.pre //remand chain results are stored on this object\n```\n\n###Services\nServices are basically shared methods or values.  Eqi will throw an error if you try to register the same service name on two seperate plugins.\n```js\nplugin.service('myModel', Model)\n```\n\n##Goals\nConfiguration oriented\nExtensible, composable servers\n\n###Thoughts on remands:\nThis is an experimental concept.  It is something like express middleware, except results are always mapped onto the specified key, and there is no error argument\n",
  "readmeFilename": "README.md",
  "_id": "eqi@0.0.0",
  "dist": {
    "shasum": "170c8c42dffbffcb14fa5e95c91835fbcfcf340e"
  },
  "_resolved": "git+https://github.com/rt2zz/eqi#a52dc918717b1af80257ea5462213e8c5f325fd7",
  "_from": "git+https://github.com/rt2zz/eqi"
}
